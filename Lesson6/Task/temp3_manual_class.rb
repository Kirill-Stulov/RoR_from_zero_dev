# варинат №2 в итоге проще и изящнее
# все что ниже нужно для проверки содержит ли массив @@stations два определенных значения. В результате получаем true или false. 
# Условие -  если оба значения есть в массиве - true. Если хотябы одного нет - false.

class Station
	attr_accessor :name
	@@stations = []
	@@st_names = []

	def initialize(name, trains)
		@name = name
		@trains = trains
		# @@stations << name         # вариант2 если закидывать только имена, то можно сразу приверять наличие значений "ora" и "deb" в массиве @@stations
		@@stations << self           # вариант1 если закидывать в массив @@stations объекты содержащие "ora" и "deb"целиком, то потом придется перед проверкой на наличие значений в массиве, преобразовать массив
	end
	
	def self.show
		p @@stations
	end

	def self.check                    
	# 1. вариант с преобразованием массива
		# a = []
		# a << @@stations.map{ |obj| obj.name }       # 1.преобразую массив объектов в простой массив 
		# a.flatten!                                    # 2. преобразую новый массив окончательно
		# (["deb","ora"] - a).empty?						# 3. Проверяю что оба значения "ora" и "deb" есть в простом массиве a
		
	# 2. вариант с простым массивом
		# (["deb","ora"] - @@stations).empty?          # не лучший вариант. получаем нужное значение вычитанием одного массива из другого
		# ([4,1] - [1,2,3,4,5,6]).empty? # => true       # простой пример лучшего варианта
		# (@@stations & ["ora","deb"]).size == 2          # иной вариант этого же варианта2, но хуже и сложнее. таким образом, проверяем, есть ли оба значения "ora" и "deb" в простом массиве @stations (метод проверки & отвечает на вопрос содержания массива ["ora","deb"] в массиве @@stations)  .size == 2 нужно чтобы получить булево значение, без этого мы получим на вывод ["ora","deb"]

	# 3. еще вариант с преобразованием массива	       # лучший вариант, делает тоже что и вариант 1, но проще 
		# st_names = []
		# @@stations.each{|obj| st_names << obj.name}
		# (["deb","ora"] - st_names).empty?

	# 4. еще вариант с многострочным блоком, который принимает метод any?
		# Выбираем (select) мужчин в возрасте 64 лет:
		# > arr = [ [30, 1], [25, 0], [64, 1], [64, 0], [33, 1] ]

		# @@stations.select { |element| element[0] == 64 && element[1] == 1 }

	end


end

Station.new("deb",1)
Station.new("ora",2)

Station.show

# p Station.check

