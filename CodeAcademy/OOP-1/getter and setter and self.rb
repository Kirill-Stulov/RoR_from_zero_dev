# геттеры сеттеры   как продолжение от initialize.rb
##d:\КУРСЫ\1. Ruby on Rails c нуля (2015) [Базовый]\Занятие 03. Основы ООП в Ruby\Занятие 03. Основы ООП в Ruby\  00:48:50
# !!!!!  # для большинства instance переменных (тут у нас это @speed) записываются геттеры и сеттеры. Чтобы не писать эти (геттеры и сеттеры) методы вручную есть в руби специальная команда (макрос), 
# который указывает то у нас есть instance переменная и специальные геттеры и сеттеры
# attr_writer :speed - для метода сеттера. Передаем туда через символ название нашей переменной и наших методов, такая команда создаст нам instance переменную @speed 
# и метод def speed=(speed)
# attr_reader :speed - для метода геттера. Создаст нам метод def speed который просто возвращает значение переменной
# еще создадим геттер для engine_volume 
# ниже - зачем нужен self

class Car

	attr_writer :speed
	attr_reader :speed
	attr_reader :engine_volume

	def initialize(speed = 0, engine_volume) 	# укажем значение по умолчанию только для скорости, то при вызове метода new на объекте класса Car, будет требоваться один обязательный 
		@speed = speed 	 					  		# элемент и один не обязательный
		@engine_volume = engine_volume    
	end

	def stop
		self.speed = 0                        # !!!ДЛЯ ПРИСВОЕНИЯ НА МЕТОДЕ НУЖНО УКАЗЫВАТЬ SELF!!!   
	end											# т.к касаемся instance переменных только в методе initialize, то в этом методе записываем как speed (без @),
														# но в таком случае чтобы не путалось с локальной переменной (а также потому как тут присвоение =) записываем через self.speed, таким образом указывая что это именно 
															# идет обращение к самому себе, объекту из attr_writer :speed   Занятие 03. Основы ООП в Ruby\  00:56:30
																#!!! т.е т.к это сеттер, это присвоение, это не локальное присвоение, а вызов метода speed, то делаем через self 
	def beep
		puts "beep beep!"
	end

	def go
		self.speed = 50
		beep                                    # тут метод beep вызывается без указания self, потому что нет присвоения 
	end

# от нижеследующих трех методов изавились, потому как сделали через attr_writer :speed, attr_reader :speed, attr_reader :engine_volume
	# def speed					 #!!! метод геттер - возвращает значение
	# 	@speed
	# end

	# def engine_volume
	# 	@engine_volume						
	# end

	# def speed=(speed)            #!!! этот сеттер записан со знаком = чтобы иметь возможность устанавливать значение instance переменной так - car.speed = 10 # метод сеттер для скорости. устанавливает значение instance переменной @speed в то значение которое передается параметром (speed)
	# 	@speed = speed
	# end
 

end

car2 = Car.new(2.0)   
p car2.go
p car2.stop
# p car2.speed = 120	          # это можно делать, т.к у нас есть attr_writer :speed
# p car2.engine_volume = 1.6    # это не выйдет, потому как мы сделали только attr_reader :engine_volume				

p car2      # > #<Car:0x00000000050721a0 @speed=120, @engine_volume=2.0> 
				# 0x00000000050721a0 - адрес объекта Car2 в памяти	
