#зачем нужен rescue и зачем нужен raise

# rescue используем когда хотим указать что если в блоке над rescue произошла ошибка, то мы подменяем системную ошибку на свой вывод или условие, или метод (смотри exceptions.rb) 
	# begin                              ##!! в begin и end помещается тот кусок кода в котором может возникнуть ошибка
	# 	puts "Before exception"
	# 	1/0
	# rescue							    # rescue - это обработка исключения (в данном примере просто rescue без указания типа исключения)
	# 	puts 'На ноль делить нельзя!'  # в результате выводится эта строка, вместо системной ошибки про деление на.
	# end

	# puts "After exception"            # и выполнение программы продолжается а не крашится как было бы с системной ошибкой. 
										# если убрать блок rescue, то 11 строка не выполнится

# raise используем когда после обработки исключения (rescue), нужно выбросить его повторно. Вызываем raise без параметров в блоке rescue - Для этого после rescue в блоке обработке пишем raise  Исключения 00:24:30	
	# raise это команда выброса исключения							

	begin 
		puts 'Before exception'
		Math.sqrt(-1)
	rescue StandardError => e
		puts 'Error!!!'
		raise                   # raise без аргументов, значит будет выброшено тоже исключение повторно и отловлено блоком rescue не будет
	rescue NoMemoryError => e     # т.е все что было после блока begin end - не выполнилось
		puts "No memory!!!"
	end

	puts "After exception"